@page "/"
@using frontend.Model
@using frontend.Model.Game

<Maps Game="Game" />

@code
{
    GameModel Game = new GameModel
    {
        Tiles = new List<TileModel>(),
        XMax = 25,
        YMax = 25,
        PlayerCharacter = new CharacterModel
        {
            BaseCharacterImage = "/img/Characters/MainCharacter/Character_32_",
            X = 0,
            Y = 0,
            Orientation = Orientation.DOWN,
            MouvementPoint = 3,
            IsInAttackingMode = false,
            IsInMovingMode = false
        }
    };

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();



        Random random = new Random();

        for (int x = 0; x < Game.XMax; x++)
        {
            for (int y = 0; y < Game.YMax; y++)
            {
                int rnd = random.Next(100);
                if (Game.PlayerCharacter.X == x && Game.PlayerCharacter.Y == y)
                {
                    rnd = 0;
                }
                Game.Tiles.Add(new TileModel { Position = new Vector2Model{ X = x, Y = y }, MapImage = "/img/grass_32.png", GameModel = Game, IsNavigable = !(rnd >= 90), ObjectImage = rnd >= 90 ? "/img/rock_32.png" : "" });
            }
        }
    }
}