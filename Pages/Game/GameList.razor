@page "/games"
@page "/list"
@using frontend.Service.Declaration
@using frontend.Model
@using frontend.Model.Game
@using frontend.Model.User

<div>

    <GameCreator XMax="25" YMax="25"></GameCreator>

</div>

<h3>Mes parties</h3>

@if (UserGames != null && UserGames.Games.Count > 0)
{
@foreach (var game in UserGames.Games)
    {
<div>
    <a href="/games/@game.Id">Partie : @game.Name</a>
</div>
    }
}
else
{
<div>Pas de partie en cours</div>
}


@code {

    /// <summary>
    /// Obtient ou définit
    /// </summary>
    [Inject]
    public IGameService GameService { get; set; }

    public UserGamesModel UserGames { get; set; } = null;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        UserGames = await GameService.ListUserActiveGame();

        await base.OnInitializedAsync();
    }

}
