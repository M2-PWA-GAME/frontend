@page "/games/{code}"
@using frontend.Service.Declaration
@using frontend.Model
@using frontend.Model.Game
@using frontend.Model.User
@using frontend.Common

<h3>Game @(GameModel?.Statut == GameStatus.WAITING ? "Waiting" : "Active") | @GameModel?.Statut</h3>
@if (GameModel?.Map != null)
{
    <MapPreview MapModel="@GameModel.Map" GameModel="@GameModel"></MapPreview>
                                                                @if (GameModel.Statut == GameStatus.ACTIVE)
                                                                {
                                                                    <button class="btn">

                                                                    </button>
                                                                }
}

<h3> Users : </h3>
@foreach (var user in Users)
{
    <div>@user.UserName</div>
}

@code {
    [Parameter]
    public string Code { get; set; }

    public GameModel GameModel { get; set; } = null;

    [Inject]
    public IGameService GameService { get; set; }

    [Inject]
    public IUserService UserService { get; set; }

    public List<UserConnectionModel> Users { get; set; } = new List<UserConnectionModel>();

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {

        GameModel = await GameService.GetGame(Code);

        GameService.InitGame(GameModel);

        foreach (var userId in GameModel.Users)
        {
            Users.Add(await UserService.GetUser(userId));
        }

        await base.OnInitializedAsync();
    }

}
