@page "/games/{code}"

@inherits frontend.Utils.Component.AuthenticatedComponent

@using frontend.Common
@using frontend.Model.Game
@using frontend.Model.User
@using frontend.Service.Declaration
@using frontend.Service.Implementation

<h3>Game @(GameModel?.Status == GameStatus.WAITING ? "Waiting" : "Playing") | @GameModel?.Status</h3>
@if (GameModel?.Map != null)
{
    <div style="position: relative">
        <MapPreview MapModel="@GameModel.Map" GameController="@GameController" ></MapPreview>
    
        @if (GameModel != null && GameModel.Status == GameStatus.PLAYING)
        {
            foreach (var gameControllerLastPlayerState in GameController.LastPlayerStates)
            {
                <div class="player" @onclick="() => GameController.OnPlayerClick(gameControllerLastPlayerState)" style="top: @(gameControllerLastPlayerState.Position.Y * 16)px; left: @(gameControllerLastPlayerState.Position.X * 16)px;" @onmouseover="() => {GameController.DisplayMouvementAndAttackForPlayerState(gameControllerLastPlayerState);GameController.SetSelectedPlayer(gameControllerLastPlayerState);}" @onmouseout="GameController.CleanDisplay">
                    <!-- onmouseover="MouseOverPlayer"  onmouseout="MouseOutPlayer"-->
                    <img alt="Player image" src="@gameControllerLastPlayerState.CharacterImage" style="margin-top: -8px" />
                    @if (!string.IsNullOrWhiteSpace(@gameControllerLastPlayerState.ObjectImage))
                    {
                        <img alt="object image" class="attack-sword-left" src="@gameControllerLastPlayerState.ObjectImage" />
                    }
                </div>
            }
        }

    </div>
    @if (GameModel.Status == GameStatus.PLAYING)
    {
        <div class="row">
            <div class="col-3">
                @if (GameController.IsUserTurn)
                {
                    @if (!GameController.IsInActions)
                    {
                        @if (!GameController.HasAttacked)
                        {
                            <button name="attack" class="btn one-click-button" @onclick="@GameController.ToogleAttackingActions">
                                <img width="16" height="16" src="/img/battle.svg" alt="attack"/>
                            </button>
                        }
                        @if (!GameController.HasMoved)
                        {
                            <button name="move" class="btn one-click-button" @onclick="@GameController.ToogleMoveActions">
                                <img width="16" height="16" src="/img/boots.svg" alt="move"/>
                            </button>
                        }
                        <button name="endTurn" class="btn one-click-button" @onclick="@GameController.EndTurn">
                            <img width="16" height="16" src="/img/end-turn.svg" alt="End Turn"/>
                        </button>
                    }

                    @if (GameController.IsInActions)
                    {
                        <button name="cancel" class="btn one-click-button" @onclick="@GameController.CancelActions">
                            <span class="oi oi-x" alt="cancel"></span>
                        </button>
                    }
                }
            </div>
            <div class="col-6">
                @if (GameController.LastSelectedPlayer != null)
                {
                    <div class="row">
                        <div class="col-3">
                            @if (GameController.LastSelectedPlayer.Id == CurrentUser.Id)
                            {
                                <img alt="selected player" src="/img/Characters/Character_16_DOWN.png"/>
                            }
                            else
                            {
                                <img alt="selected player" src="/img/Characters/CharacterEnemy_16_DOWN.png"/>
                            }
                        </div>
                        <div class="col-6">
                            <div>
                                Health @GameController.LastSelectedPlayer.Health
                            </div>
                            <div>
                                Armor @GameController.LastSelectedPlayer.Armor
                            </div>
                            <div>
                                MouvementPointLeft @GameController.LastSelectedPlayer.MouvementPointLeft
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

<h3> Users : </h3>
@foreach (var user in Users)
{
    <div>@user.UserName</div>
}

@code {
    [Parameter]
    public string Code { get; set; }

    public GameModel GameModel { get; set; } = null;

    [Inject]
    public IGameService GameService { get; set; }

    [Inject]
    public IJSRuntime JsRuntime { get; set; }

    public GameController GameController { get; set; }

    public List<UserConnectionModel> Users { get; set; } = new List<UserConnectionModel>();

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        GameModel = await GameService.GetGame(Code);

        GameController = new GameController(GameModel, CurrentUser.Id, JsRuntime, GameService);
        await GameController.InitGameAsync();

        foreach (var userId in GameModel.Users)
        {
            Users.Add(await UserService.GetUser(userId));
        }

        if (GameController != null)
        {
            GameController.RefreshRequested += Game_OnRefreshRequested;
        }
    }



    private void Game_OnRefreshRequested()
    {
        StateHasChanged();
    }
}