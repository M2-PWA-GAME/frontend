@page "/user/signin"
@using frontend.Model.User
@using frontend.Service.Declaration

<h3>@(IsSignIn ? "SignIn" : "SignUp")</h3>


<EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <p>
        <div>
            Login:
            <InputText @bind-Value="UserConnectionModel.UserName"/>
        </div>
        @if (!IsSignIn)
        {
            <div>
                Email:
                <InputText type="email" @bind-Value="UserConnectionModel.Email"/>
            </div>
        }
        <div>
            Password:
            <InputText type="password" @bind-Value="UserConnectionModel.Password"/>
        </div>
    </p>

    <div>
        @if (IsSignIn)
        {
            <button class="btn btn-light" @onclick="() => { IsSignIn = !IsSignIn; }">SignUp</button>
        }
        else
        {
            <button class="btn btn-light" @onclick="() => { IsSignIn = !IsSignIn; }">SignIn</button>
        }

        <button class="btn btn-light" type="submit">Submit</button>
    </div>
</EditForm>


@code {
    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public bool IsSignIn { get; set; }

    public UserConnectionModel UserConnectionModel = new UserConnectionModel();

    private EditContext editContext;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

#if DEBUG
        UserConnectionModel = new UserConnectionModel { Email = "test2@test.com", Password = "123456", UserName = "Test" };
#endif
        IsSignIn = true;
        editContext = new EditContext(UserConnectionModel);
    }

    private async Task HandleSubmit()
    {
        if (editContext.Validate())
        {
            if (IsSignIn)
            {
                await UserService.SignIn(UserConnectionModel);
            }
            else
            {
                await UserService.SignUp(UserConnectionModel);
            }

            NavigationManager.NavigateTo("/");
        }
        else
        {
        }
    }


}