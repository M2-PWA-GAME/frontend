@using frontend.Service.Declaration
@using frontend.Model.User
@using frontend.Service.Implementation
@inherits LayoutComponentBase

<div class="page">
    <NavMenu />
    <main>
            @if (User != null)
            {
@*                 <a href='/user/me'>Me</a> *@
                @User.UserName
            }
            else
            {
                <a href='/user/signin'>SignIn</a>
            }
            @Body
    </main>
</div>
<style>
main {
    width: 100%;
    margin: 120px clamp(50px, 10%, 150px) 0;
}
@@media only screen and (max-width: 768px){
    main {
        margin: 100px 0;
    }
}
</style>

@code
{
    [Inject]
    public IUserService UserService { get; set; }

    public UserConnectionModel User = null;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        User = await UserService.GetCurrentUser();
        ((UserService)UserService).UserChanged += UserChangedHandler;
    }

    private async void UserChangedHandler()
    {
        User = await UserService.GetCurrentUser();
    }
}
